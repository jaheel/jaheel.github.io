<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex</title>
  
  <subtitle>Trying</subtitle>
  <link href="/jaheel.github.io/atom.xml" rel="self"/>
  
  <link href="http://jaheel.github.io/blog/"/>
  <updated>2020-07-12T12:23:58.000Z</updated>
  <id>http://jaheel.github.io/blog/</id>
  
  <author>
    <name>Fons Hui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集成学习</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-19T13:28:26.540Z</published>
    <updated>2020-07-12T12:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>集成学习：构建并结合多个学习器来完成学习任务（多分类器系统）</p><p>结构：先产生一组“个体学习器”(individual learner)，再用某种策略将它们结合起来</p><p>同质(homogeneous)</p><blockquote><p>“决策树集成”中全是决策树，“神经网络集成”中全是神经网络</p><p>基学习器(base learner) —&gt; 基学习算法(base learning algorithm)</p></blockquote><p>异质(heterogenous)</p><blockquote><p>个体学习器由不同学习算法组成：组件学习器(component learner)</p></blockquote><p>研究核心：如何产生并结合“好而不同”的个体学习器</p><p>分类：</p><ol><li><p>个体学习器间存在强依赖关系、必须串行生成的序列化方法</p><blockquote><p>Boosting</p></blockquote></li><li><p>个体学习器间不存在强依赖关系、可同时生成的并行化方法</p><blockquote><p>Bagging和“随机森林”(Random Forest)</p></blockquote></li></ol><h2 id="1-Boosting"><a href="#1-Boosting" class="headerlink" title="1 Boosting"></a>1 Boosting</h2><p>将弱学习器提升为强学习器的算法</p><p>代表算法：AdaBoost算法</p><h2 id="2-Bagging"><a href="#2-Bagging" class="headerlink" title="2 Bagging"></a>2 Bagging</h2><p>自助采样法(bootstrap sampling)</p><p>过程：给定m个样本的数据集，随机取一个再放回，重复m次，形成采样集；总共T个采样集，再基于采样集训练基学习器，再将这些基学习器结合。</p><p>样本扰动</p><h2 id="3-随机森林-RF"><a href="#3-随机森林-RF" class="headerlink" title="3 随机森林(RF)"></a>3 随机森林(RF)</h2><p>在以决策树为基学习器构建Bagging集成的基础上，进一步在决策树的训练过程中引入了随机属性选择。</p><p>样本扰动+属性扰动</p><h2 id="4-结合策略"><a href="#4-结合策略" class="headerlink" title="4 结合策略"></a>4 结合策略</h2><ol><li><p>平均法averaging（回归问题）</p><blockquote><p>简单平均法(Simple averaging)</p><p>加权平均法(weighted averaging)</p></blockquote></li><li><p>投票法 voting（分类问题）</p><blockquote><p>绝对多数投票法(majority voting)：必须占一半以上</p><p>相对多数投票法(plurality voting)：最多票数即可</p><p>加权投票法(weighted voting)</p></blockquote></li><li><p>学习法</p><blockquote><p>Stacking</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;集成学习：构建并结合多个学习器来完成学习任务（多分类器系统）&lt;/p&gt;
&lt;p&gt;结构：先产生一组“个体学习器”(individual learner)，再用某种策略将它们结合起来&lt;/p&gt;
&lt;p&gt;同质(homogeneous)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“决策树集成
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://jaheel.github.io/blog/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Machine Learning" scheme="http://jaheel.github.io/blog/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>降维与度量学习</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E9%99%8D%E7%BB%B4%E4%B8%8E%E5%BA%A6%E9%87%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E9%99%8D%E7%BB%B4%E4%B8%8E%E5%BA%A6%E9%87%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-19T13:28:26.539Z</published>
    <updated>2020-07-12T12:24:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>懒惰学习(lazy learning)</p><blockquote><p>在训练阶段把样本保存起来，训练时间开销为零，待收到测试样本后再进行处理</p></blockquote><p>急切学习(eager learning)</p><blockquote><p>再训练阶段对样本进行学习处理的方法</p></blockquote><p>降维(dimension reduction)</p><blockquote><p>通过某种数学变换将原始高维属性空间转变为一个低维“子空间”</p><p>在这个子空间中样本密度大幅提高，距离计算也变得更为容易</p></blockquote><p>多维缩放(Multiple Dimensional Scaling, MDS)</p><p>主成分分析(Principle Component Analysis, PCA)</p><p>核主成分分析(Kernelized PCA, KPCA)</p><p>等度量映射(Isometric Mapping)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;懒惰学习(lazy learning)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在训练阶段把样本保存起来，训练时间开销为零，待收到测试样本后再进行处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;急切学习(eager learning)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://jaheel.github.io/blog/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Machine Learning" scheme="http://jaheel.github.io/blog/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>队列（链式）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E9%98%9F%E5%88%97%EF%BC%88%E9%93%BE%E5%BC%8F%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E9%98%9F%E5%88%97%EF%BC%88%E9%93%BE%E5%BC%8F%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.536Z</published>
    <updated>2020-02-11T11:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">QueuePtr front;<span class="comment">//队头指针</span></span><br><span class="line">QueuePtr rear;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Q.front = Q.rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!Q.front)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(LinkQueue &amp;Q)</span><span class="comment">//销毁队列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (Q.front) &#123;</span><br><span class="line">Q.rear = Q.front-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(Q.front);</span><br><span class="line">Q.front = Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CLearQueue</span><span class="params">(LinkQueue &amp;Q)</span><span class="comment">//清空队列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueuePtr p, q;</span><br><span class="line"><span class="keyword">if</span> (!Q.front)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line">Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">Q.rear = Q.front;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.rear == Q.front)</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueuePtr p;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">GetHead</span><span class="params">(LinkQueue Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueuePtr p;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueuePtr p;</span><br><span class="line">p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">Q.rear-&gt;next = p;</span><br><span class="line">Q.rear = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueuePtr p;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line">Q.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (Q.rear == p)</span><br><span class="line">Q.rear = Q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueuePtr p = Q.front-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n;</span><br><span class="line">QElemType k, h, a, f;</span><br><span class="line">LinkQueue Q;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建一个空队列！\n&quot;</span>);</span><br><span class="line">InitQueue(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;判断队列是否为空!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;QueueEmpty(Q)=%d\n&quot;</span>, QueueEmpty(Q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建队列的元素个数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入%d个插入队列的元素的值：\n&quot;</span>, n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">EnQueue(Q, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队列元素的值：\n&quot;</span>);</span><br><span class="line">QueueTraverse(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入插入队列的元素的值：&quot;</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">EnQueue(Q, h);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入插入一个队列元素后队列元素的值：&quot;</span>);</span><br><span class="line">QueueTraverse(Q);</span><br><span class="line">DeQueue(Q, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入第1个删除的队头元素的值：%d\n&quot;</span>, a);</span><br><span class="line">DeQueue(Q, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入第2个删除的队头元素的值：%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出两次删除队头元素后队列的元素值：&quot;</span>);</span><br><span class="line">QueueTraverse(Q);</span><br><span class="line"><span class="keyword">if</span> (!GetHead(Q, f))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队头元素的值：%d\n&quot;</span>, f);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队列元素的个数：%d\n&quot;</span>, QueueLength(Q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;将Q清为空队列！\n&quot;</span>);</span><br><span class="line">CLearQueue(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队列元素的个数：%d\n&quot;</span>, QueueLength(Q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;判断队列是否为空！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;QueueEmpty(Q)=%d\n&quot;</span>, QueueEmpty(Q));</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Queue" scheme="http://jaheel.github.io/blog/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>队列(循环)</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E9%98%9F%E5%88%97(%E5%BE%AA%E7%8E%AF)/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E9%98%9F%E5%88%97(%E5%BE%AA%E7%8E%AF)/</id>
    <published>2020-10-19T13:28:26.534Z</published>
    <updated>2020-02-11T11:12:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXQSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">QElemType *base;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Q.base = (QElemType *)<span class="built_in">malloc</span>(MAXQSIZE * <span class="keyword">sizeof</span>(QElemType));</span><br><span class="line"><span class="keyword">if</span> (!Q.base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.rear = Q.front=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CLearQueue</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q.base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.rear = Q.front;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.rear == Q.front)</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q.rear - Q.front+MAXQSIZE)%MAXQSIZE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">GetHead</span><span class="params">(SqQueue Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">e = Q.base[Q.front];</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((Q.rear+<span class="number">1</span>)%MAXQSIZE==Q.front)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">Q.base[Q.rear] = e;</span><br><span class="line">Q.rear=(Q.rear+<span class="number">1</span>)%MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">e = Q.base[Q.front];</span><br><span class="line">Q.front = (Q.front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">p = Q.front;</span><br><span class="line"><span class="keyword">while</span> (p != Q.rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Q.base[p]);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n;</span><br><span class="line">QElemType k, h, a, f;</span><br><span class="line">SqQueue Q;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建一个空队列！\n&quot;</span>);</span><br><span class="line">InitQueue(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;判断队列是否为空！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;QueueEmpty(Q)=%d\n&quot;</span>, QueueEmpty(Q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建队列的元素个数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入%d个插入队列的元素的值：\n&quot;</span>, n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">EnQueue(Q, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队列元素的值：\n&quot;</span>);</span><br><span class="line">QueueTraverse(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入插入队列的元素的值：&quot;</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">EnQueue(Q, h);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出插入一个队列元素后队列元素的值：\n&quot;</span>);</span><br><span class="line">QueueTraverse(Q);</span><br><span class="line">DeQueue(Q, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出第1个删除的队头元素的值：%d\n&quot;</span>, a);</span><br><span class="line">DeQueue(Q, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出第2个删除的队头元素的值：%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出两次删除队头元素后队列的元素值：&quot;</span>);</span><br><span class="line">QueueTraverse(Q);</span><br><span class="line"><span class="keyword">if</span> (!GetHead(Q, f))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队头元素的值：%d\n&quot;</span>, f);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队列元素的个数：%d\n&quot;</span>, QueueLength(Q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;将Q清为空队列！\n&quot;</span>);</span><br><span class="line">CLearQueue(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出队列元素的个数：%d\n&quot;</span>, QueueLength(Q));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;判断队列是否为空！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;QueueEmpty(Q)=%d\n&quot;</span>, QueueEmpty(Q));</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="C++" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="Queue" scheme="http://jaheel.github.io/blog/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>计算学习理论</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E8%AE%A1%E7%AE%97%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E8%AE%A1%E7%AE%97%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/</id>
    <published>2020-10-19T13:28:26.532Z</published>
    <updated>2020-07-12T12:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://books.google.com.hk/books?id=n79Zh2JzBhYC&pg=RA1-PA930&lpg=RA1-PA930&dq=PAC学习&source=bl&ots=bfMpxn5sUv&sig=ACfU3U2S6oXxodelVkXqKmwUxsX6EynaoA&hl=en&sa=X&ved=2ahUKEwic2IP7nsXqAhUSPXAKHQnGBo4Q6AEwBnoECA8QAQ#v=onepage&q=PAC学习&f=false">https://books.google.com.hk/books?id=n79Zh2JzBhYC&amp;pg=RA1-PA930&amp;lpg=RA1-PA930&amp;dq=PAC%E5%AD%A6%E4%B9%A0&amp;source=bl&amp;ots=bfMpxn5sUv&amp;sig=ACfU3U2S6oXxodelVkXqKmwUxsX6EynaoA&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwic2IP7nsXqAhUSPXAKHQnGBo4Q6AEwBnoECA8QAQ#v=onepage&amp;q=PAC%E5%AD%A6%E4%B9%A0&amp;f=false</a></p><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h2><p>​        采用数学方法，研究学习算法的计算复杂性和所需信息量的大小，分析算法所需的时间和空间资源，判定学习对象的可学习性等所形成的理论。</p><h2 id="1-1-历史研究"><a href="#1-1-历史研究" class="headerlink" title="1.1 历史研究"></a>1.1 历史研究</h2><p>1967年，E. M. Gold，形式化语言研究 提出 极限辨识理论</p><blockquote><p>什么是正确的辨识(学习)的形式定义</p></blockquote><p>D. Angluin 探讨新的学习对象，提出 模式语言学习</p><blockquote><p>对学习对象的限制，获取某些有用的结果</p></blockquote><p>1984年，L. G. Valiant 提出 PAC模型（概率近似模型）</p><blockquote><p>反映了机器学习和人类学习的某些特点</p></blockquote><p>VC维数</p><blockquote><p>和可学习型以及所需样本数联系起来</p></blockquote><h2 id="2-PAC学习模型"><a href="#2-PAC学习模型" class="headerlink" title="2 PAC学习模型"></a>2 PAC学习模型</h2><ol><li>允许学习者有时失败</li><li>允许学习者在学习成功时可以是近似正确的</li></ol><p>PAC可学习性定义</p><blockquote><p>误差参数、可靠性参数</p><p>学习产生的假设和目标之间的误差不超过误差参数</p><p>超过误差参数属于失败，失败概率小于 可靠性参数</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://books.google.com.hk/books?id=n79Zh2JzBhYC&amp;pg=RA1-PA930&amp;lpg=RA1-PA930&amp;dq=PAC学习&amp;source=bl&amp;ots=bfMpxn5sUv&amp;sig=ACfU3U2S6oXxo
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://jaheel.github.io/blog/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Machine Learning" scheme="http://jaheel.github.io/blog/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>线索二叉树（建立、遍历）（前、中、后序）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%BB%BA%E7%AB%8B%E3%80%81%E9%81%8D%E5%8E%86%EF%BC%89%EF%BC%88%E5%89%8D%E3%80%81%E4%B8%AD%E3%80%81%E5%90%8E%E5%BA%8F%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%BB%BA%E7%AB%8B%E3%80%81%E9%81%8D%E5%8E%86%EF%BC%89%EF%BC%88%E5%89%8D%E3%80%81%E4%B8%AD%E3%80%81%E5%90%8E%E5%BA%8F%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.530Z</published>
    <updated>2020-02-11T12:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义线索二叉树的数据结构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;<span class="comment">//结点对应的数据</span></span><br><span class="line"><span class="keyword">int</span> ltag, rtag;<span class="comment">//左右孩子标记</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>;</span><span class="comment">//左孩子</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">rchild</span>;</span><span class="comment">//右孩子</span></span><br><span class="line">&#125;BiThrNode,*BiThrTree;</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   输出对应结点里面的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">PrintElement</span><span class="params">(TElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">寻找p结点在Thrt树中的父节点，便于进行后序遍历</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">BiThrTree <span class="title">parent</span><span class="params">(BiThrTree &amp;Thrt, BiThrTree &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiThrTree temp=Thrt-&gt;lchild;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (p==Thrt-&gt;lchild)<span class="comment">//p即为根节点，返回创建的头结点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Thrt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp-&gt;lchild == p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> temp;<span class="comment">//父节点就是我们寻找的结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;lchild;</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;lchild != p&amp;&amp;temp-&gt;rchild != p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果节点有右孩子，那就往右</span></span><br><span class="line"><span class="comment">如果节点没有右孩子，就往左</span></span><br><span class="line"><span class="comment">没有左孩子，就往前驱</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (temp-&gt;rtag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建线索二叉树，初始化跟二叉树的初始化递归算法一样</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">CreateBiThrTree</span><span class="params">(BiThrTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(T = (BiThrNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"> </span><br><span class="line">T-&gt;data = ch;</span><br><span class="line">T-&gt;ltag = <span class="number">0</span>;</span><br><span class="line">T-&gt;rtag = <span class="number">0</span>;</span><br><span class="line">CreateBiThrTree(T-&gt;lchild);</span><br><span class="line">CreateBiThrTree(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    T指向头结点，头结点的左链lchild指向根节点</span></span><br><span class="line"><span class="comment">中序遍历二叉线索树T的非递归算法，对每个数据元素调用函数Visit</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">InOrderTraverse_Thr</span><span class="params">(BiThrTree T, Status(*Visit)(TElemType e))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiThrTree p = T-&gt;lchild;</span><br><span class="line"><span class="keyword">while</span> (p&amp;&amp;(p != T))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;ltag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line"><span class="keyword">while</span> (p-&gt;rtag == <span class="number">1</span> &amp;&amp; p-&gt;rchild != T)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   前序遍历二叉树非递归算法(仿造中序遍历）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">PreOrderTraverse_Thr</span><span class="params">(BiThrTree T, Status(*Visit)(TElemType e))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiThrTree p = T;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;ltag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   后序遍历二叉树非递归算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">PostOrderTraverse_Thr</span><span class="params">(BiThrTree T, Status(*Visit)(TElemType e))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiThrTree p = T-&gt;lchild;</span><br><span class="line">BiThrTree pre = T;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//p指向第一个被访问结点</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;ltag == <span class="number">0</span>||p-&gt;rtag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>)</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rtag == <span class="number">0</span>)</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (p != T) </span><br><span class="line">&#123;</span><br><span class="line">Visit(p-&gt;data);</span><br><span class="line">pre = parent(T, p);<span class="comment">//找到该节点的双亲</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (T == pre)<span class="comment">//如果双亲是T，就说明p是根节点，无后继</span></span><br><span class="line">&#123;</span><br><span class="line">p = T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果p是双亲的右孩子，或者双亲无右孩子，则后继为双亲</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p==pre-&gt;rchild||pre-&gt;rtag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若p的双亲有右孩子，后继为双亲右子树上后序遍历的第一个孩子</span></span><br><span class="line"><span class="keyword">while</span> (pre-&gt;rtag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre = pre-&gt;rchild;</span><br><span class="line"><span class="keyword">while</span> (pre-&gt;ltag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre = pre-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p = pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  中序遍历进行二叉树线索化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p,BiThrTree &amp;pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">InThreading(p-&gt;lchild,pre);<span class="comment">//左子树线索化</span></span><br><span class="line"><span class="keyword">if</span> (!p-&gt;lchild)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">p-&gt;lchild = pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((!pre-&gt;rchild)&amp;&amp;pre-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">pre-&gt;rchild = p;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">InThreading(p-&gt;rchild, pre);<span class="comment">//右子树线索化</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   前序遍历进行二叉树线索化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preThreading</span><span class="params">(BiThrTree p, BiThrTree &amp;pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;lchild = pre;</span><br><span class="line">p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">NULL</span>&amp;&amp;pre-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;rchild = p;</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ltag == <span class="number">0</span>)</span><br><span class="line">preThreading(p-&gt;lchild, pre);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rtag == <span class="number">0</span>)</span><br><span class="line">preThreading(p-&gt;rchild, pre);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   后序遍历进行线索二叉树化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postThreading</span><span class="params">(BiThrTree p, BiThrTree &amp;pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">postThreading(p-&gt;lchild, pre);</span><br><span class="line">postThreading(p-&gt;rchild, pre);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;lchild = pre;</span><br><span class="line">p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">NULL</span>&amp;&amp;pre-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;rchild = p;</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   中序遍历二叉树T，并将其中序线索化，Thrt指向头结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">InOrderThreading</span><span class="params">(BiThrTree &amp;Thrt, BiThrTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//建立头结点</span></span><br><span class="line"><span class="keyword">if</span> (!(Thrt = (BiThrTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Thrt-&gt;ltag = <span class="number">0</span>;</span><br><span class="line">Thrt-&gt;rtag = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">Thrt-&gt;rchild = Thrt;<span class="comment">//右指针回指</span></span><br><span class="line">BiThrTree pre;</span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line">Thrt-&gt;lchild = Thrt;<span class="comment">//若二叉树为空，则指针回指</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Thrt-&gt;lchild = T;</span><br><span class="line">pre = Thrt;</span><br><span class="line">InThreading(T,pre);<span class="comment">//中序遍历进行中序线索化</span></span><br><span class="line">pre-&gt;rchild = Thrt;<span class="comment">//最后一个结点线索化</span></span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">Thrt-&gt;rchild = pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   后序遍历二叉树，并将其线索化，原理同中序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">PostOrderThreading</span><span class="params">(BiThrTree &amp;Thrt, BiThrTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//建立头结点</span></span><br><span class="line"><span class="keyword">if</span> (!(Thrt = (BiThrTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiThrNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Thrt-&gt;ltag = <span class="number">0</span>;</span><br><span class="line">Thrt-&gt;rtag = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">Thrt-&gt;rchild = Thrt;<span class="comment">//右指针回指</span></span><br><span class="line">BiThrTree pre;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line">Thrt-&gt;lchild = Thrt;<span class="comment">//若二叉树为空，则指针回指</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Thrt-&gt;lchild = T;</span><br><span class="line">pre = <span class="literal">NULL</span>;</span><br><span class="line">postThreading(T, pre);<span class="comment">//后序遍历进行后序线索化</span></span><br><span class="line">pre-&gt;rchild = Thrt;</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">Thrt-&gt;rchild = pre;<span class="comment">//最后一个结点线索化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">BiThrTree T1, Thrt1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;创建线索二叉树，按先序次序输入线索二叉树中结点的值：\n&quot;</span>;</span><br><span class="line">CreateBiThrTree(T1);</span><br><span class="line"><span class="keyword">if</span> (InOrderThreading(Thrt1, T1) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功建立中序线索化链表！\n&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历线索二叉树，结果是：\n&quot;</span>;</span><br><span class="line">InOrderTraverse_Thr(Thrt1, PrintElement);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">BiThrTree T2;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;创建线索二叉树，按先序次序输入线索二叉树中结点的值：\n&quot;</span>;</span><br><span class="line">CreateBiThrTree(T2);</span><br><span class="line">BiThrTree test1 = T2;</span><br><span class="line">preThreading(T2, test1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;前序遍历线索二叉树，结果是：\n&quot;</span>;</span><br><span class="line">PreOrderTraverse_Thr(T2, PrintElement);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">BiThrTree T3,Thrt3;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;创建线索二叉树，按先序次序输入线索二叉树中结点的值：\n&quot;</span>;</span><br><span class="line">CreateBiThrTree(T3);</span><br><span class="line"><span class="keyword">if</span> (PostOrderThreading(Thrt3, T3) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功建立后序序线索化链表！\n&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历线索二叉树，结果是：\n&quot;</span>;</span><br><span class="line">PostOrderTraverse_Thr(Thrt3, PrintElement);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Tree" scheme="http://jaheel.github.io/blog/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>线性表（动态分配 逆置、排序）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D-%E9%80%86%E7%BD%AE%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D-%E9%80%86%E7%BD%AE%E3%80%81%E6%8E%92%E5%BA%8F%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.528Z</published>
    <updated>2020-02-11T11:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>结构：线性表动态分配顺序存储结构</p></li><li><p>目的：逆置</p><a id="more"></a></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType *elem;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">int</span> listsize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitList_Sq</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L.elem = (ElemType *)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line"><span class="keyword">if</span> (!L.elem)</span><br><span class="line"><span class="keyword">return</span> OVERFLOW;</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">L.listsize = LIST_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">ListCreate_Sq</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">L.elem[i] = rand() % <span class="number">90</span> + <span class="number">10</span>;</span><br><span class="line">++L.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">ListOutput_Sq</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L.elem[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">ListConverse_Sq</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ElemType temp;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = L.elem[i];</span><br><span class="line">L.elem[i] = L.elem[L.length - <span class="number">1</span> - i];</span><br><span class="line">L.elem[L.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SqList L;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Initialize the sequential list!&quot;</span>);</span><br><span class="line">InitList_Sq(L);</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The sequential list is empty!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Create the sequential list!\n&quot;</span>);</span><br><span class="line">ListCreate_Sq(L, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Output all elements of the sequential list!\n&quot;</span>);</span><br><span class="line">ListOutput_Sq(L);</span><br><span class="line">ListConverse_Sq(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Output all converse elements of the sequential list\n&quot;</span>);</span><br><span class="line">ListOutput_Sq(L);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> j;<span class="built_in">cin</span> &gt;&gt; j;</span><br><span class="line">system(<span class="string">&quot;puase&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>结构：带头结点线性链表</p></li><li><p>目的：逆置，不另设新空间</p></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p, q;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">q = L;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data = rand() % <span class="number">90</span> + <span class="number">10</span>;</span><br><span class="line">q-&gt;next = p;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">OutputList_L</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">ListConverse_L</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p, q;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next=q;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;OK&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList L;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Create the linked list,&quot;</span>);</span><br><span class="line">CreateList_L(L, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Output all elements of the linked list!\n&quot;</span>);</span><br><span class="line">OutputList_L(L);</span><br><span class="line">ListConverse_L(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Output all converse elements of the linked list!\n&quot;</span>);</span><br><span class="line">OutputList_L(L);</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; j;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>结构：线性表动态分配顺序存储结构</p></li><li><p>目的：实现顺序表中数据元素按值非递减排列</p></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TURE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType *elem;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">int</span> listsize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitList_Sq</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L.elem = (ElemType *)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line"><span class="keyword">if</span> (!L.elem)</span><br><span class="line"><span class="keyword">return</span> OVERFLOW;</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">L.listsize = LIST_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">ListCreate_Sq</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">L.elem[i] = rand() % <span class="number">90</span> + <span class="number">10</span>;</span><br><span class="line">++L.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">ListOutput_Sq</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L.elem[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = L.elem[low];</span><br><span class="line"><span class="keyword">int</span> pivotkey = L.elem[low];</span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high&amp;&amp;L.elem[high] &gt;= pivotkey)</span><br><span class="line">--high;</span><br><span class="line">   L.elem[low] = L.elem[high];</span><br><span class="line"><span class="keyword">while</span> (low &lt; high&amp;&amp;L.elem[low] &lt;= pivotkey)</span><br><span class="line">++low;</span><br><span class="line">L.elem[high] = L.elem[low];</span><br><span class="line">&#125;</span><br><span class="line">L.elem[low] = temp;</span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pivotloc = Partition(L, low, high);</span><br><span class="line">QSort(L, low, pivotloc - <span class="number">1</span>);</span><br><span class="line">QSort(L, pivotloc + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListSort_Sq</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QSort(L, <span class="number">0</span>, L.length<span class="number">-1</span> );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SqList L;</span><br><span class="line">InitList_Sq(L);</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The sequential list is empty!\n&quot;</span>);</span><br><span class="line">ListCreate_Sq(L, <span class="number">5</span>);</span><br><span class="line">ListOutput_Sq(L);</span><br><span class="line">ListSort_Sq(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sorted:\n&quot;</span>);</span><br><span class="line">ListOutput_Sq(L);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>结构：带头结点的线性链表L</p></li><li><p>目的：数据元素按值非递减排列</p></li><li><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p, q;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">q = L;</span><br><span class="line">srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">p-&gt;data = rand() % <span class="number">90</span> + <span class="number">10</span>;</span><br><span class="line">q-&gt;next = p;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">OutputList_L</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">result</span><span class="params">(LinkList L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p = L;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LinkList <span class="title">par</span><span class="params">(LinkList L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p = L;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = result(L,low);</span><br><span class="line"><span class="keyword">int</span> pivotkey = result(L,low);</span><br><span class="line">LinkList p, q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">p = par(L, low);</span><br><span class="line">q = par(L, high);</span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; q-&gt;data &gt;= pivotkey)</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">--high;</span><br><span class="line">q = par(L, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;data = q-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(L + low)-&gt;data = (L + high)-&gt;data;</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; p-&gt;data &lt;= pivotkey)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">++low;</span><br><span class="line">p = par(L, low);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q-&gt;data = p-&gt;data;</span><br><span class="line"><span class="comment">//(L + high)-&gt;data = (L + low)-&gt;data;</span></span><br><span class="line">&#125;</span><br><span class="line">p = par(L, low);</span><br><span class="line">p-&gt;data = temp;</span><br><span class="line"><span class="comment">//(L + low)-&gt;data = temp;</span></span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pivotloc = Partition(L, low, high);</span><br><span class="line"></span><br><span class="line">QSort(L, low, pivotloc - <span class="number">1</span>);</span><br><span class="line">QSort(L, pivotloc + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListSort_Sq</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p = L-&gt;next;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QSort(L, <span class="number">1</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList L;</span><br><span class="line">CreateList_L(L, <span class="number">5</span>);</span><br><span class="line">OutputList_L(L);</span><br><span class="line">ListSort_Sq(L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Sorted:&quot;</span>);</span><br><span class="line">OutputList_L(L);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;结构：线性表动态分配顺序存储结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目的：逆置&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Linked List" scheme="http://jaheel.github.io/blog/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>稀疏矩阵</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</id>
    <published>2020-10-19T13:28:26.525Z</published>
    <updated>2020-02-11T11:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>页码：P99</p><p>IDE：VS2015</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MU 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NU 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Status int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 12500</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i, j;<span class="comment">//该非零元的行下标和列下标</span></span><br><span class="line">ElemType e;</span><br><span class="line">&#125;Triple;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Triple data[MAXSIZE + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> mu, nu, tu;<span class="comment">//矩阵的行数、列数、非零元个数</span></span><br><span class="line">&#125;TSMatrix;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CreateMatrix</span><span class="params">(TSMatrix &amp;M)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> e, i, j, k = <span class="number">1</span>;</span><br><span class="line">M.mu = MU;</span><br><span class="line">M.nu = NU;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">M.tu = rand() % <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M.mu;i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; M.nu; j++)</span><br><span class="line">&#123;</span><br><span class="line">e = rand() % <span class="number">30</span>;</span><br><span class="line"><span class="keyword">if</span> (e != <span class="number">0</span>) &#123;</span><br><span class="line">M.data[k].i = i;</span><br><span class="line">M.data[k].j = j;</span><br><span class="line">M.data[k].e = e;</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">if</span> (k == M.tu)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(TSMatrix M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mu=%-2d, nu=%-2d, tu=%-2d&quot;</span>, M.mu, M.nu, M.tu);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= M.tu; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i=%-2d, j=%-2d, e=%-2d&quot;</span>, M.data[k].i, M.data[k].j, M.data[k].e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">TransposeSMatrix</span><span class="params">(TSMatrix M, TSMatrix &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T.mu = M.nu;</span><br><span class="line">T.nu = M.mu;</span><br><span class="line">T.tu = M.tu;</span><br><span class="line"><span class="keyword">if</span> (T.tu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">1</span>;col&lt;=M.mu;++col)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= M.tu; ++p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (M.data[p].j == col)</span><br><span class="line">&#123;</span><br><span class="line">T.data[q].i = M.data[p].j;</span><br><span class="line">T.data[q].j = M.data[p].i;</span><br><span class="line">T.data[q].e = M.data[p].e;</span><br><span class="line">++q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">FastTransposeSMatrix</span><span class="params">(TSMatrix M, TSMatrix &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T.mu = M.nu;</span><br><span class="line">T.nu = M.mu;</span><br><span class="line">T.tu = M.tu;</span><br><span class="line"><span class="keyword">int</span> col, t, q, p;</span><br><span class="line"><span class="keyword">int</span> num[NU];</span><br><span class="line"><span class="keyword">int</span> cpot[NU];</span><br><span class="line"><span class="keyword">if</span> (T.tu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (col = <span class="number">1</span>; col &lt;= M.nu; ++col)</span><br><span class="line">num[col] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (t = <span class="number">1</span>; t &lt;= M.tu; ++t)</span><br><span class="line">++num[M.data[t].j];</span><br><span class="line">cpot[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (col = <span class="number">2</span>; col &lt;= M.nu; ++col)</span><br><span class="line">cpot[col] = cpot[col - <span class="number">1</span>] + num[col - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">1</span>; p &lt;= M.tu; ++p)</span><br><span class="line">&#123;</span><br><span class="line">col = M.data[p].j;</span><br><span class="line">q = cpot[col];</span><br><span class="line">T.data[q].i = M.data[p].j;</span><br><span class="line">T.data[q].j = M.data[p].i;</span><br><span class="line">T.data[q].e = M.data[p].e;</span><br><span class="line">++cpot[col];</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TSMatrix M, T,R;</span><br><span class="line">CreateMatrix(M);</span><br><span class="line">TransposeSMatrix(M, T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出稀疏矩阵M：\n&quot;</span>);</span><br><span class="line">print(M);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出转置矩阵T：\n&quot;</span>);</span><br><span class="line">print(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">FastTransposeSMatrix(M, R);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出快速转置矩阵R：\n&quot;</span>);</span><br><span class="line">print(R);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;页码：P99&lt;/p&gt;
&lt;p&gt;IDE：VS2015&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="data structrue" scheme="http://jaheel.github.io/blog/tags/data-structrue/"/>
    
      <category term="Matrix" scheme="http://jaheel.github.io/blog/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>特征选择与稀疏学习</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E4%B8%8E%E7%A8%80%E7%96%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E4%B8%8E%E7%A8%80%E7%96%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-19T13:28:26.523Z</published>
    <updated>2020-07-12T12:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>特征(feature)</p><p>相关特征(relevant feature)</p><p>无关特征(irrelevant feature)</p><p>特征选择(feature selection)</p><blockquote><p>从给定的特征集合中选择出相关特征子集的过程</p></blockquote><p>冗余特征(redundant feature)</p><p>“前向”搜索</p><blockquote><p>逐渐增加相关特征的策略</p></blockquote><p>“后向”搜索</p><blockquote><p>每次尝试去掉一个无关特征，逐渐减少特征</p></blockquote><p>“双向”搜索</p><blockquote><p>将前向和后向搜索结合起来</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;特征(feature)&lt;/p&gt;
&lt;p&gt;相关特征(relevant feature)&lt;/p&gt;
&lt;p&gt;无关特征(irrelevant feature)&lt;/p&gt;
&lt;p&gt;特征选择(feature selection)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从给定的特征集合中选择出
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://jaheel.github.io/blog/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Machine Learning" scheme="http://jaheel.github.io/blog/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>栈（实现、应用）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E6%A0%88%EF%BC%88%E5%AE%9E%E7%8E%B0%E3%80%81%E5%BA%94%E7%94%A8%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E6%A0%88%EF%BC%88%E5%AE%9E%E7%8E%B0%E3%80%81%E5%BA%94%E7%94%A8%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.521Z</published>
    <updated>2020-02-11T11:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>页码：P46</p><p>实现：</p><ol><li>初始化顺序栈</li><li>创建顺序栈</li><li>判断栈空</li><li>输出顺序栈</li><li>取栈顶元素</li><li>入栈</li><li>出栈</li></ol><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">SElemType *base;</span><br><span class="line">SElemType *top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">S.base = (SElemType *)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">S.top = S.base;</span><br><span class="line">S.stacksize = STACK_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"> e=  *(S.top<span class="number">-1</span>);</span><br><span class="line"> <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize)</span><br><span class="line">&#123;</span><br><span class="line">S.base = (SElemType *)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREMENT) * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line"><span class="keyword">if</span> (!S.base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">S.top = S.base + S.stacksize;</span><br><span class="line">S.stacksize += STACKINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line">*S.top++ = e;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">e = *--S.top;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">Stackoutput</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SElemType *p;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">p = S.base;</span><br><span class="line"><span class="keyword">while</span> (p != S.top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SElemType *p;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">p = S.top - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p != S.base - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *p);</span><br><span class="line">p--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, n, k, h, a, b;</span><br><span class="line">SqStack S;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建一个空栈!\n&quot;</span>);</span><br><span class="line">InitStack(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;判断栈是否为空！\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;StackEmpty(S)=%d\n&quot;</span>, StackEmpty(S));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建栈的元素个数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入%d个入栈元素的值：\n&quot;</span>, n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">Push(S, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;逆序输出顺序栈元素值：\n&quot;</span>);</span><br><span class="line">Stackoutput(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出顺序栈元素值：\n&quot;</span>);</span><br><span class="line">StackTraverse(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入入栈元素值：&quot;</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">Push(S, h);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出入栈后的顺序栈元素值：\n&quot;</span>);</span><br><span class="line">StackTraverse(S);</span><br><span class="line">Pop(S, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出第一个出栈元素值：%d\n&quot;</span>, a);</span><br><span class="line">Pop(S, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出第二个出栈元素值：%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出两次出栈后顺序栈元素值：&quot;</span>);</span><br><span class="line">StackTraverse(S);</span><br><span class="line">GetTop(S, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出栈顶元素值：%d\n&quot;</span>, b);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;页码：P46&lt;/p&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化顺序栈&lt;/li&gt;
&lt;li&gt;创建顺序栈&lt;/li&gt;
&lt;li&gt;判断栈空&lt;/li&gt;
&lt;li&gt;输出顺序栈&lt;/li&gt;
&lt;li&gt;取栈顶元素&lt;/li&gt;
&lt;li&gt;入栈&lt;/li&gt;
&lt;li&gt;出栈&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Stack" scheme="http://jaheel.github.io/blog/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>查找（二叉排序树）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E6%9F%A5%E6%89%BE%EF%BC%88%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E6%9F%A5%E6%89%BE%EF%BC%88%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.520Z</published>
    <updated>2020-02-11T11:36:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构 P227-231</p><p>实现：算法9.5-9.8</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EQ(a,b) (a==b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LT(a,b) (a&lt;b)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">KeyType key;<span class="comment">//关键字域</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function">Status <span class="title">InsertBST</span><span class="params">(BiTree &amp;T,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">T = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">T-&gt;lchild = T-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">T-&gt;data = e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//关键字已存在于树中，插入失败，返回0</span></span><br><span class="line"><span class="keyword">if</span> (e.key == T-&gt;data.key)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e.key &lt; T-&gt;data.key)</span><br><span class="line"><span class="keyword">return</span> InsertBST(T-&gt;lchild, e);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> InsertBST(T-&gt;rchild, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data.key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild)</span><br><span class="line">PreOrderTraverse(T-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (T-&gt;rchild)</span><br><span class="line">PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序递归遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild)</span><br><span class="line">InOrderTraverse(T-&gt;lchild);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data.key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (T-&gt;rchild)</span><br><span class="line">InOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序递归遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild)</span><br><span class="line">PostOrderTraverse(T-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (T-&gt;rchild)</span><br><span class="line">PostOrderTraverse(T-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data.key&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找关键字</span></span><br><span class="line"><span class="function">BiTree <span class="title">SearchBSTa</span><span class="params">(BiTree T, KeyType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;data.key == e)</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e &lt; T-&gt;data.key)</span><br><span class="line"><span class="keyword">return</span> SearchBSTa(T-&gt;lchild, e);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> SearchBSTa(T-&gt;rchild, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除确定结点</span></span><br><span class="line"><span class="function">Status <span class="title">Delete</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiTNode *p=<span class="keyword">new</span> BiTNode();</span><br><span class="line"><span class="comment">//右子树为空</span></span><br><span class="line"><span class="keyword">if</span> (!T-&gt;rchild)</span><br><span class="line">&#123;</span><br><span class="line">p = T;</span><br><span class="line">T = T-&gt;lchild;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左子树为空</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!T-&gt;lchild)</span><br><span class="line">&#123;</span><br><span class="line">p = T;</span><br><span class="line">T = T-&gt;rchild;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//左右子树均不空</span></span><br><span class="line">&#123;</span><br><span class="line">p = T;</span><br><span class="line">BiTNode *s = <span class="keyword">new</span> BiTNode();</span><br><span class="line">s = T-&gt;lchild;</span><br><span class="line"><span class="keyword">while</span> (s-&gt;rchild)</span><br><span class="line">&#123;</span><br><span class="line">T = s;</span><br><span class="line">s = s-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;data = s-&gt;data;</span><br><span class="line"><span class="keyword">if</span> (p != T)</span><br><span class="line">p-&gt;rchild = s-&gt;lchild;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">T-&gt;lchild = s-&gt;lchild;</span><br><span class="line"><span class="keyword">delete</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到删除的结点</span></span><br><span class="line"><span class="function">Status <span class="title">DeleteBST</span><span class="params">(BiTree &amp;T, KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!T)</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (EQ(key, T-&gt;data.key))</span><br><span class="line"><span class="keyword">return</span> Delete(T);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (LT(key, T-&gt;data.key))</span><br><span class="line"><span class="keyword">return</span> DeleteBST(T-&gt;lchild, key);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> DeleteBST(T-&gt;rchild, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//DeleteBST</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiTree T = <span class="literal">NULL</span>, s;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入二叉排序树的结点数：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;个结点的值:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; e.key;</span><br><span class="line">InsertBST(T, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;先序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PreOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">InOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PostOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入要查找结点的值：\n&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; e.key;</span><br><span class="line">s = SearchBSTa(T, e.key);</span><br><span class="line"><span class="keyword">if</span> (s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已找到！结点的八进制地址为：%o\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没找到&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入插入结点的值：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; e.key;</span><br><span class="line">InsertBST(T, e);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;先序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PreOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">InOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PostOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入要删除结点的值：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; e.key;</span><br><span class="line">DeleteBST(T, e.key);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;先序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PreOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">InOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历二叉排序树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PostOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构 P227-231&lt;/p&gt;
&lt;p&gt;实现：算法9.5-9.8&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Search" scheme="http://jaheel.github.io/blog/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>数组（顺序存储）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E6%95%B0%E7%BB%84%EF%BC%88%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E6%95%B0%E7%BB%84%EF%BC%88%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.518Z</published>
    <updated>2020-02-11T11:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>IDE: VS2015</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ARRAY_DIM 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Status int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType *base;<span class="comment">//数组元素基址</span></span><br><span class="line"><span class="keyword">int</span> dim;<span class="comment">//数组维数</span></span><br><span class="line"><span class="keyword">int</span> *bounds;<span class="comment">//数组维界基址</span></span><br><span class="line"><span class="keyword">int</span> *constants;<span class="comment">//数组映像函数常量基址</span></span><br><span class="line">&#125;Array;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitArray</span><span class="params">(Array &amp;A, <span class="keyword">int</span> dim,...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dim&lt;<span class="number">1</span> || dim&gt;MAX_ARRAY_DIM)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">A.dim = dim;</span><br><span class="line">A.bounds = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(dim*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">va_list ap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> elemtotal = <span class="number">1</span>;<span class="comment">//A的元素总数</span></span><br><span class="line">va_start(ap, dim);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dim; ++i)</span><br><span class="line">&#123;</span><br><span class="line">A.bounds[i] = va_arg(ap, <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">if</span> (A.bounds[i] &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> UNDERFLOW;</span><br><span class="line">elemtotal *= A.bounds[i];</span><br><span class="line">&#125;</span><br><span class="line">va_end(ap);</span><br><span class="line">A.base = (ElemType *)<span class="built_in">malloc</span>(elemtotal * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line"></span><br><span class="line">A.constants = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(dim * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">A.constants[dim - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = dim - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">A.constants[i] = A.bounds[i + <span class="number">1</span>] * A.constants[i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">DestroyArray</span><span class="params">(Array &amp;A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!A.base)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="built_in">free</span>(A.base);</span><br><span class="line">A.base = ERROR;</span><br><span class="line"><span class="keyword">if</span> (!A.bounds)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="built_in">free</span>(A.bounds);</span><br><span class="line">A.bounds = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (!A.constants)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="built_in">free</span>(A.constants);</span><br><span class="line">A.constants = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">Locate</span><span class="params">(Array &amp;A, va_list ap, <span class="keyword">int</span> &amp;off)</span><span class="comment">//若ap指示的各下标合法，则求出该元素在A中的相对地址off</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">off = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ind;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.dim; ++i)</span><br><span class="line">&#123;</span><br><span class="line"> ind = va_arg(ap, <span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">if</span> (ind &lt; <span class="number">0</span> || ind &gt;= A.bounds[i])</span><br><span class="line"><span class="keyword">return</span> OVERFLOW;</span><br><span class="line">off += A.constants[i] * ind;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">Value</span><span class="params">(Array A, ElemType *e, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">va_list ap;</span><br><span class="line"></span><br><span class="line">va_start(ap, e);</span><br><span class="line">Status result;</span><br><span class="line"><span class="keyword">int</span> off;</span><br><span class="line"><span class="keyword">if</span> ((result = Locate(A, ap, off)) &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">*e = *(A.base + off);</span><br><span class="line">va_end(ap);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">Assign</span><span class="params">(Array &amp;A, ElemType e, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">va_list ap;</span><br><span class="line">va_start(ap, e);</span><br><span class="line">Status result;</span><br><span class="line"><span class="keyword">int</span> off;</span><br><span class="line"><span class="keyword">if</span> ((result = Locate(A, ap, off)) &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">*(A.base + off) = e;</span><br><span class="line">va_end(ap);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Array A;</span><br><span class="line">ElemType e;</span><br><span class="line">InitArray(A, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">Assign(A, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (Value(A, &amp;e,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出e的值:&quot;</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (DestroyArray(A) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组A销毁成功!&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;IDE: VS2015&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="C++" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="Array" scheme="http://jaheel.github.io/blog/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>排序（快速排序）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E6%8E%92%E5%BA%8F%EF%BC%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E6%8E%92%E5%BA%8F%EF%BC%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.516Z</published>
    <updated>2020-02-11T11:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>页码：P272-276</p><p>实现：算法10.6-10.8</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LT(a,b) (a&lt;b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EQ(a,b) (a==b)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> InfoType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">KeyType key;<span class="comment">//关键字项</span></span><br><span class="line">InfoType otherinfo;<span class="comment">//其他数据项</span></span><br><span class="line">&#125;RedType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">RedType r[MAXSIZE + <span class="number">1</span>];<span class="comment">//r[0]闲置或用作哨兵单位</span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//顺序表长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表类型</span></span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//构造一个空的顺序表L</span></span><br><span class="line">L.length = <span class="number">0</span>;<span class="comment">//空表长度为0</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建n个元素的顺序表</span></span><br><span class="line"><span class="function">Status <span class="title">CreateList</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;个元素&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; L.r[i].key;</span><br><span class="line">++L.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;<span class="comment">//创建失败</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出顺序表</span></span><br><span class="line"><span class="function">Status <span class="title">DispList</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= L.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L.r[i].key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L.r[<span class="number">0</span>] = L.r[low];</span><br><span class="line"><span class="keyword">int</span> pivotkey = L.r[low].key;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high&amp;&amp;L.r[high].key &gt;= pivotkey)</span><br><span class="line">--high;</span><br><span class="line">L.r[low] = L.r[high];</span><br><span class="line"><span class="keyword">while</span> (low &lt; high&amp;&amp;L.r[low].key &lt;= pivotkey)</span><br><span class="line">++low;</span><br><span class="line">L.r[high] = L.r[low];</span><br><span class="line">&#125;</span><br><span class="line">L.r[low] = L.r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pivotloc = Partition(L, low, high);</span><br><span class="line">QSort(L, low, pivotloc - <span class="number">1</span>);<span class="comment">//对底子表递归排序</span></span><br><span class="line">QSort(L, pivotloc + <span class="number">1</span>, high);<span class="comment">//对高子表递归排序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QSort(L, <span class="number">1</span>, L.length);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SqList L;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;初始化顺序表，&quot;</span>;</span><br><span class="line">InitList(L);</span><br><span class="line"><span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;顺序表为空！\n&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顺序表的元素个数:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">CreateList(L, n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;个元素的顺序表如下:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">DispList(L);</span><br><span class="line">QuickSort(L);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;快速排序结果如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">DispList(L);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;页码：P272-276&lt;/p&gt;
&lt;p&gt;实现：算法10.6-10.8&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Sort" scheme="http://jaheel.github.io/blog/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>排序（堆排序）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E6%8E%92%E5%BA%8F%EF%BC%88%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E6%8E%92%E5%BA%8F%EF%BC%88%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.513Z</published>
    <updated>2020-02-11T11:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(HeapType &amp;H, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RedType rc = H.r[s];</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span> * s; j &lt;= m; j *= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt; m&amp;&lt;(H.r[j].key, H.r[j + <span class="number">1</span>].key))</span><br><span class="line">++j;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!LT(rc.key, H.r[j].key))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">H.r[s] = H.r[j];</span><br><span class="line">s = j;</span><br><span class="line">&#125;</span><br><span class="line">H.r[s] = rc;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//对顺序表H进行堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(HeapType &amp;H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//建立最大堆</span></span><br><span class="line"><span class="keyword">for</span> (i = H.length / <span class="number">2</span>; i &gt;=<span class="number">1</span>; --i)</span><br><span class="line">HeapAdjust(H, i, H.length);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (i = H.length; i &gt;=<span class="number">2</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">RedType temp = H.r[<span class="number">1</span>];</span><br><span class="line">H.r[<span class="number">1</span>] = H.r[i];</span><br><span class="line">H.r[i] = temp;</span><br><span class="line"> </span><br><span class="line">HeapAdjust(H, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Sort" scheme="http://jaheel.github.io/blog/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>图（邻接表）（BFS、DFS）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE%EF%BC%88%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%89%EF%BC%88BFS%E3%80%81DFS%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE%EF%BC%88%E9%82%BB%E6%8E%A5%E8%A1%A8%EF%BC%89%EF%BC%88BFS%E3%80%81DFS%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.511Z</published>
    <updated>2020-02-11T11:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下（附解析）：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 20<span class="comment">//最大顶点个数</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> InfoType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> visited[MAX_VERTEX_NUM];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> adjvex;<span class="comment">//该弧所指向的顶点位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">nextarc</span>;</span><span class="comment">//指向下一条弧的指针</span></span><br><span class="line">InfoType info;<span class="comment">//该弧相关信息的指针</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span> &#123;</span></span><br><span class="line">VertexType data;<span class="comment">//顶点信息</span></span><br><span class="line">ArcNode *firstarc;<span class="comment">//指向第一条依附该顶点的弧的指针</span></span><br><span class="line">&#125;VNode,AdjList[MAX_VERTEX_NUM];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">AdjList vertices;</span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum;<span class="comment">//图的当前顶点数和弧数</span></span><br><span class="line"><span class="keyword">int</span> kind;<span class="comment">//图的种类标志</span></span><br><span class="line">&#125;ALGraph;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(ALGraph G, <span class="keyword">char</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.vertices[i].data == v)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   采用邻接表存储表示，构造无向图G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">CreateUDG</span><span class="params">(ALGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, IncInfo;</span><br><span class="line">ArcNode *pi, *pj;</span><br><span class="line"><span class="keyword">char</span> v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vertices[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;].data:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vertices[i].data;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//初始化链表头指针为空</span></span><br><span class="line">G.vertices[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   输入各边并构造邻接表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边的两个顶点:&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边的起点和终点</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定V1和V2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line"><span class="keyword">if</span> (!(pi = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"><span class="comment">//对弧结点赋邻接点&quot;位置&quot;信息</span></span><br><span class="line">pi-&gt;adjvex = j;</span><br><span class="line">pi-&gt;info = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//插入链表G.vertices[i]</span></span><br><span class="line">pi-&gt;nextarc = G.vertices[i].firstarc;</span><br><span class="line">G.vertices[i].firstarc = pi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(pj = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"><span class="comment">//对弧结点赋邻接点&quot;位置&quot;信息</span></span><br><span class="line"><span class="comment">//插入链表G.vertices[j]</span></span><br><span class="line">pj-&gt;adjvex = i;</span><br><span class="line">pj-&gt;info = <span class="number">0</span>;</span><br><span class="line">pj-&gt;nextarc = G.vertices[j].firstarc;</span><br><span class="line">G.vertices[j].firstarc = pj;</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//CreateUDG</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//有向图</span></span><br><span class="line"><span class="function">Status <span class="title">CreateDG</span><span class="params">(ALGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, IncInfo;</span><br><span class="line">ArcNode *pi, *pj;</span><br><span class="line"><span class="keyword">char</span> v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vertices[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;].data:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vertices[i].data;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//初始化链表头指针为空</span></span><br><span class="line">G.vertices[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入各边并构造邻接表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边的两个顶点:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边的起点和终点</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定V1和V2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line"><span class="keyword">if</span> (!(pi = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"><span class="comment">//对弧结点赋邻接点&quot;位置&quot;信息</span></span><br><span class="line">pi-&gt;adjvex = j;</span><br><span class="line">pi-&gt;info = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//插入链表G.vertices[i]</span></span><br><span class="line">pi-&gt;nextarc = G.vertices[i].firstarc;</span><br><span class="line">G.vertices[i].firstarc = pi;</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//CreateDG</span></span><br><span class="line"><span class="comment">//有向网</span></span><br><span class="line"><span class="function">Status <span class="title">CreateDN</span><span class="params">(ALGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, IncInfo;</span><br><span class="line">ArcNode *pi, *pj;</span><br><span class="line"><span class="keyword">char</span> v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入是否有Info信息（0、没有，1、有）&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; IncInfo;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vertices[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;].data:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vertices[i].data;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//初始化链表头指针为空</span></span><br><span class="line">G.vertices[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入各边并构造邻接表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边的两个顶点和相连边的权值:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边的起点和终点</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; IncInfo;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定V1和V2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line"><span class="keyword">if</span> (!(pi = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"><span class="comment">//对弧结点赋邻接点&quot;位置&quot;信息</span></span><br><span class="line">pi-&gt;adjvex = j;</span><br><span class="line"><span class="comment">//插入链表G.vertices[i]</span></span><br><span class="line">pi-&gt;nextarc = G.vertices[i].firstarc;</span><br><span class="line">G.vertices[i].firstarc = pi;</span><br><span class="line"></span><br><span class="line">pi-&gt;info = IncInfo;</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//CreateDN</span></span><br><span class="line"><span class="comment">//无向网</span></span><br><span class="line"><span class="function">Status <span class="title">CreateUDN</span><span class="params">(ALGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, IncInfo;</span><br><span class="line">ArcNode *pi, *pj;</span><br><span class="line"><span class="keyword">char</span> v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入是否有Info信息（0、没有，1、有）&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; IncInfo;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vertices[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;].data:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vertices[i].data;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//初始化链表头指针为空</span></span><br><span class="line">G.vertices[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入各边并构造邻接表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边的两个顶点和相连边的权值:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边的起点和终点</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; IncInfo;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定V1和V2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line"><span class="keyword">if</span> (!(pi = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"><span class="comment">//对弧结点赋邻接点&quot;位置&quot;信息</span></span><br><span class="line">pi-&gt;adjvex = j;</span><br><span class="line"><span class="comment">//插入链表G.vertices[i]</span></span><br><span class="line">pi-&gt;nextarc = G.vertices[i].firstarc;</span><br><span class="line">G.vertices[i].firstarc = pi;</span><br><span class="line">pi-&gt;info = IncInfo;</span><br><span class="line"><span class="keyword">if</span> (!(pj = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line"><span class="comment">//对弧结点赋邻接点&quot;位置&quot;信息</span></span><br><span class="line">pj-&gt;adjvex = i;</span><br><span class="line"><span class="comment">//插入链表G.vertices[i]</span></span><br><span class="line">pj-&gt;nextarc = G.vertices[j].firstarc;</span><br><span class="line">G.vertices[j].firstarc = pi;</span><br><span class="line">pj-&gt;info = IncInfo;</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//CreateUDN</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CreateGraph</span><span class="params">(ALGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入图的种类：0表示DG，1表示DN，2表示UDG，3表示UDN&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.kind;</span><br><span class="line"><span class="keyword">switch</span> (G.kind)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> CreateDG(G);</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> CreateDN(G);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> CreateUDG(G);</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> CreateUDN(G);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list</span><span class="params">(ALGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">ArcNode *p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出邻接表（（0）代表无权值）：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; G.vertices[i].data;</span><br><span class="line">p = G.vertices[i].firstarc;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">3</span>) &lt;&lt; p-&gt;adjvex;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt;p-&gt;info&lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">p = p-&gt;nextarc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(ALGraph G, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ArcNode *p;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">visited[v] = TRUE;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vertices[v].data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (p = G.vertices[v].firstarc; p; p = p-&gt;nextarc)</span><br><span class="line">&#123;</span><br><span class="line">w = p-&gt;adjvex;</span><br><span class="line"><span class="keyword">if</span> (!visited[w])<span class="comment">//对v的尚未访问的邻接顶点w递归调用DFS</span></span><br><span class="line">DFS(G, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(ALGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line">visited[v] = FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[v])</span><br><span class="line">&#123;</span><br><span class="line">DFS(G, v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(ALGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v,w;</span><br><span class="line"><span class="comment">//辅助队列</span></span><br><span class="line"><span class="keyword">int</span> front=<span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">VNode Queue[MAX_VERTEX_NUM];</span><br><span class="line">ArcNode *p;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化标志数组</span></span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line">visited[v] = FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[v])<span class="comment">//v尚未访问</span></span><br><span class="line">&#123;</span><br><span class="line">visited[v] =<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vertices[v].data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">Queue[++rear] = G.vertices[v];<span class="comment">//v入队列</span></span><br><span class="line"><span class="keyword">while</span> (front != rear)<span class="comment">//判断队列是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">VNode u = Queue[++front];<span class="comment">//队头元素出队列，并等于u</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断该结点的后序表结点,存在即输出，入队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (p = u.firstarc; p; p = p-&gt;nextarc)</span><br><span class="line">&#123;</span><br><span class="line">w = p-&gt;adjvex;</span><br><span class="line"><span class="keyword">if</span> (!visited[w])</span><br><span class="line">&#123;</span><br><span class="line">visited[w] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vertices[w].data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">Queue[++rear] = G.vertices[w];</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line">&#125;<span class="comment">//BFSTraverse</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ALGraph G;</span><br><span class="line">CreateGraph(G);</span><br><span class="line"><span class="built_in">list</span>(G);</span><br><span class="line"><span class="comment">//深度优先遍历图</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;深度优先遍历：&quot;</span>;</span><br><span class="line">DFSTraverse(G);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//广度优先遍历</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;广度优先遍历：&quot;</span>;</span><br><span class="line">BFSTraverse(G);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码如下（附解析）：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Graph" scheme="http://jaheel.github.io/blog/tags/Graph/"/>
    
      <category term="BFS" scheme="http://jaheel.github.io/blog/tags/BFS/"/>
    
      <category term="DFS" scheme="http://jaheel.github.io/blog/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>图（Floyd算法）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE%EF%BC%88Floyd%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE%EF%BC%88Floyd%E7%AE%97%E6%B3%95%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.509Z</published>
    <updated>2020-02-11T11:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>页码：P191-192</p><p>实现：算法7.16（解析：图7.37）</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 32767 <span class="comment">//最大值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 20 <span class="comment">//最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VRType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> InfoType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">bool</span>*** PathMatrix;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//&#123;有向图，有向网，无向图，无向网&#125;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> DG, DN, UDG, UDN &#125;GraphKind;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcCell</span> &#123;</span></span><br><span class="line">VRType adj;<span class="comment">//VRType是顶点关系类型。对无权图，用1或0</span></span><br><span class="line">   <span class="comment">//表示相邻否；对带权图，则为权值类型</span></span><br><span class="line">InfoType *info;<span class="comment">//该弧相关信息的指针</span></span><br><span class="line">&#125;ArcCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> ArcCell** DistancMatrix;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">VertexType vexs[MAX_VERTEX_NUM];<span class="comment">//顶点向量</span></span><br><span class="line">AdjMatrix arcs;<span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum;<span class="comment">//图的当前顶点数和弧数</span></span><br><span class="line">GraphKind kind;<span class="comment">//图的种类标志</span></span><br><span class="line">&#125;MGraph;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//在G中找到v对应的顶点位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(MGraph G, <span class="keyword">char</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.vexs[i] == v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CreateDN</span><span class="params">(MGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, w;</span><br><span class="line">VertexType v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vexs[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexs[i];</span><br><span class="line">getchar();</span><br><span class="line">&#125;<span class="comment">//构造顶点向量</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//初始化邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">G.arcs[i][j].adj = INFINITY;</span><br><span class="line">G.arcs[i][j].info = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line">&#123;</span><br><span class="line">G.arcs[i][j].adj = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边vi、vj和权值w(int):&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边依附的顶点及权值</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定v1和v2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line">G.arcs[i][j].adj = w;<span class="comment">//弧&lt;v1,v2&gt;的权值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list</span><span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出邻接矩阵：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vexs[i] &lt;&lt; <span class="string">&quot;----&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.arcs[i][j].adj == INFINITY)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; <span class="string">&quot;∞&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; G.arcs[i][j].adj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_FLOYD</span><span class="params">(MGraph G,PathMatrix &amp;P, DistancMatrix &amp;D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, v, w,u;</span><br><span class="line">P = (<span class="keyword">bool</span> ***)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">bool</span> *)*G.vexnum);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">P[i] = (<span class="keyword">bool</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">bool</span>)*G.vexnum);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G.vexnum;++j)</span><br><span class="line">P[i][j] = (<span class="keyword">bool</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">bool</span>)*G.vexnum);</span><br><span class="line"> </span><br><span class="line">D = (ArcCell **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcCell)*G.vexnum);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">D[i]= (ArcCell *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcCell)*G.vexnum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//各对结点之间初始已知路径及距离</span></span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; G.vexnum; ++w)</span><br><span class="line">&#123;</span><br><span class="line">D[v][w] = G.arcs[v][w];</span><br><span class="line"><span class="keyword">for</span> (u = <span class="number">0</span>; u &lt; G.vexnum; ++u)</span><br><span class="line">&#123;</span><br><span class="line">P[v][w][u] = FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从v到w有直接路径</span></span><br><span class="line"><span class="keyword">if</span> (D[v][w].adj &lt; INFINITY&amp;&amp;D[v][w].adj!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">P[v][w][v] = TRUE;</span><br><span class="line">P[v][w][w] = TRUE;</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (u = <span class="number">0</span>; u &lt; G.vexnum; ++u)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; G.vexnum; ++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从v经u到w的一条路径更短</span></span><br><span class="line"><span class="keyword">if</span> (D[v][u].adj + D[u][w].adj &lt; D[v][w].adj)</span><br><span class="line">&#123;</span><br><span class="line">D[v][w].adj = D[v][u].adj + D[u][w].adj;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">P[v][w][i] = P[v][u][i] || P[u][w][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出每一对顶点之间的最短路径长度如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vexs[v] &lt;&lt; <span class="string">&quot;----&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; G.vexnum; ++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (D[v][w].adj == INFINITY)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, D[v][w].adj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MGraph G;</span><br><span class="line"><span class="keyword">int</span> v0;</span><br><span class="line">PathMatrix P;</span><br><span class="line">DistancMatrix D;</span><br><span class="line">CreateDN(G);</span><br><span class="line"><span class="built_in">list</span>(G);</span><br><span class="line">ShortestPath_FLOYD(G, P, D);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;页码：P191-192&lt;/p&gt;
&lt;p&gt;实现：算法7.16（解析：图7.37）&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Graph" scheme="http://jaheel.github.io/blog/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>图（Dijkstra算法）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE%EF%BC%88Dijkstra%E7%AE%97%E6%B3%95%EF%BC%89/</id>
    <published>2020-10-19T13:28:26.507Z</published>
    <updated>2020-02-11T11:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>页码：P189</p><p>实现：算法7.15</p><p>IDE：VS2015</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 32767 <span class="comment">//最大值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 20 <span class="comment">//最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VRType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> InfoType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">bool</span>** PathMatrix;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//&#123;有向图，有向网，无向图，无向网&#125;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> DG, DN, UDG, UDN &#125;GraphKind;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcCell</span> &#123;</span></span><br><span class="line">VRType adj;<span class="comment">//VRType是顶点关系类型。对无权图，用1或0</span></span><br><span class="line">   <span class="comment">//表示相邻否；对带权图，则为权值类型</span></span><br><span class="line">InfoType *info;<span class="comment">//该弧相关信息的指针</span></span><br><span class="line">&#125;ArcCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> ArcCell* ShortPathTable;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">VertexType vexs[MAX_VERTEX_NUM];<span class="comment">//顶点向量</span></span><br><span class="line">AdjMatrix arcs;<span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum;<span class="comment">//图的当前顶点数和弧数</span></span><br><span class="line">GraphKind kind;<span class="comment">//图的种类标志</span></span><br><span class="line">&#125;MGraph;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//在G中找到v对应的顶点位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(MGraph G, <span class="keyword">char</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.vexs[i] == v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CreateDN</span><span class="params">(MGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, w;</span><br><span class="line">VertexType v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vexs[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexs[i];</span><br><span class="line">getchar();</span><br><span class="line">&#125;<span class="comment">//构造顶点向量</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//初始化邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">G.arcs[i][j].adj = INFINITY;</span><br><span class="line">G.arcs[i][j].info = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边vi、vj和权值w(int):&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边依附的顶点及权值</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定v1和v2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line">G.arcs[i][j].adj = w;<span class="comment">//弧&lt;v1,v2&gt;的权值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list</span><span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出邻接矩阵：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vexs[i] &lt;&lt; <span class="string">&quot;----&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.arcs[i][j].adj == INFINITY)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; <span class="string">&quot;∞&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; G.arcs[i][j].adj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_DIJ</span><span class="params">(MGraph G, <span class="keyword">int</span> v0, PathMatrix &amp;P, ShortPathTable &amp;D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, v, w;</span><br><span class="line">P = (<span class="keyword">bool</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">bool</span> *)*G.vexnum);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">P[i] = (<span class="keyword">bool</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">bool</span>)*G.vexnum);</span><br><span class="line">D = (ArcCell *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcCell)*G.vexnum);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> *<span class="keyword">final</span> = <span class="keyword">new</span> <span class="keyword">bool</span>[G.vexnum];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G.vexnum; ++v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">final</span>[v] = FALSE;</span><br><span class="line">D[v] = G.arcs[v0][v];</span><br><span class="line"><span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; G.vexnum; ++w)</span><br><span class="line">&#123;</span><br><span class="line">P[v][w] = FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (D[v].adj &lt; INFINITY)</span><br><span class="line">&#123;</span><br><span class="line">P[v][v0] = TRUE;</span><br><span class="line">P[v][v] = TRUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> min;</span><br><span class="line"><span class="comment">//初始化,v0顶点属于S集</span></span><br><span class="line">D[v0].adj = <span class="number">0</span>; <span class="keyword">final</span>[v0] = TRUE;</span><br><span class="line"><span class="comment">//开始主循环，每次求得v0到某个顶点的最短路径，并加v到S集</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">min = INFINITY;</span><br><span class="line"><span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; G.vexnum; ++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//w顶点在V-S中</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">final</span>[w])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//w顶点离v0顶点更近</span></span><br><span class="line"><span class="keyword">if</span> (D[w].adj &lt; min)</span><br><span class="line">&#123;</span><br><span class="line">v = w;</span><br><span class="line">min = D[w].adj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span>[v] = TRUE;<span class="comment">//离v0顶点最近的v加入S集</span></span><br><span class="line"><span class="comment">//更新当前最短路径和距离</span></span><br><span class="line"><span class="keyword">for</span> (w = <span class="number">0</span>; w &lt; G.vexnum; ++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//修改D[w]和P[w]</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">final</span>[w] &amp;&amp; (min + G.arcs[v][w].adj &lt; D[w].adj))</span><br><span class="line">&#123;</span><br><span class="line">D[w].adj = min + G.arcs[v][w].adj;</span><br><span class="line">P[w] = P[v];</span><br><span class="line">P[w][w] = TRUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=v0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3c  %3c  &quot;</span>,G.vexs[v0],G.vexs[i]);</span><br><span class="line"><span class="keyword">if</span> (D[i].adj != INFINITY)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d    &quot;</span>, D[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (P[i][j])</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vexs[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MGraph G;</span><br><span class="line"><span class="keyword">int</span> v0;</span><br><span class="line">PathMatrix P;</span><br><span class="line">ShortPathTable D;</span><br><span class="line">CreateDN(G);</span><br><span class="line"><span class="built_in">list</span>(G);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入源点序号v0:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v0;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出从源点&quot;</span> &lt;&lt; v0 &lt;&lt; <span class="string">&quot;到其余顶点的最短路径如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;始点 终点 路径长度 最短路径&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ShortestPath_DIJ(G, v0, P, D);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;页码：P189&lt;/p&gt;
&lt;p&gt;实现：算法7.15&lt;/p&gt;
&lt;p&gt;IDE：VS2015&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Graph" scheme="http://jaheel.github.io/blog/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>有向图、无向图、有向网、无向网（邻接矩阵）</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE-(%E6%9C%89%E5%90%91%E3%80%81%E6%97%A0%E5%90%91)(%E5%9B%BE%E3%80%81%E7%BD%91)(%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5)/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E5%9B%BE-(%E6%9C%89%E5%90%91%E3%80%81%E6%97%A0%E5%90%91)(%E5%9B%BE%E3%80%81%E7%BD%91)(%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5)/</id>
    <published>2020-10-19T13:28:26.505Z</published>
    <updated>2020-02-11T11:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>教材：严版数据结构</p><p>页码：P162</p><p>算法： 7.1-7.2</p><p>代码如下：</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY INT_MAX <span class="comment">//最大值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 20 <span class="comment">//最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VRType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> InfoType;</span><br><span class="line"><span class="comment">//&#123;有向图，有向网，无向图，无向网&#125;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>DG,DN,UDG,UDN&#125;GraphKind;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcCell</span> &#123;</span></span><br><span class="line">VRType adj;<span class="comment">//VRType是顶点关系类型。对无权图，用1或0</span></span><br><span class="line"><span class="comment">//表示相邻否；对带权图，则为权值类型</span></span><br><span class="line">InfoType *info;<span class="comment">//该弧相关信息的指针</span></span><br><span class="line">&#125;ArcCell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">VertexType vexs[MAX_VERTEX_NUM];<span class="comment">//顶点向量</span></span><br><span class="line">AdjMatrix arcs;<span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="keyword">int</span> vexnum, arcnum;<span class="comment">//图的当前顶点数和弧数</span></span><br><span class="line">GraphKind kind;<span class="comment">//图的种类标志</span></span><br><span class="line">&#125;MGraph;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在G中找到v对应的顶点位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(MGraph G, <span class="keyword">char</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.vexs[i] == v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  算法7.2</span></span><br><span class="line"><span class="comment">  采用数组（邻接矩阵）表示法，构造无向网G</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">CreateUDN</span><span class="params">(MGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, w;</span><br><span class="line">VertexType v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vexs[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexs[i];</span><br><span class="line">getchar();</span><br><span class="line">&#125;<span class="comment">//构造顶点向量</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">G.arcs[i][j].adj = INFINITY;</span><br><span class="line">G.arcs[i][j].info = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边vi、vj和权值w(int):&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边依附的顶点及权值</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定v1和v2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line">G.arcs[i][j].adj = w;<span class="comment">//弧&lt;v1,v2&gt;的权值</span></span><br><span class="line"><span class="comment">//置&lt;v1,v2&gt;的对称弧&lt;v2,v1&gt;</span></span><br><span class="line">G.arcs[j][i].adj = G.arcs[i][j].adj;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CreateDN</span><span class="params">(MGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, w;</span><br><span class="line">VertexType v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vexs[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexs[i];</span><br><span class="line">getchar();</span><br><span class="line">&#125;<span class="comment">//构造顶点向量</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//初始化邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">G.arcs[i][j].adj = INFINITY;</span><br><span class="line">G.arcs[i][j].info = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边vi、vj和权值w(int):&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输入一条边依附的顶点及权值</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定v1和v2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line">G.arcs[i][j].adj = w;<span class="comment">//弧&lt;v1,v2&gt;的权值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有向图的构造</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">CreateDG</span><span class="params">(MGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, w;</span><br><span class="line">VertexType v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vexs[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexs[i];</span><br><span class="line">getchar();</span><br><span class="line">&#125;<span class="comment">//构造顶点向量</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//初始化邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">G.arcs[i][j].adj = <span class="number">0</span>;</span><br><span class="line">G.arcs[i][j].info = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边vi、vj:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定v1和v2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line">G.arcs[i][j].adj = <span class="number">1</span>;<span class="comment">//1代表可达，0代表不可达</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">无向图的构造</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">CreateUDG</span><span class="params">(MGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, w;</span><br><span class="line">VertexType v1, v2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点数G.vexnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexnum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入边数G.arcnum:&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.arcnum;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入顶点G.vexs[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; G.vexs[i];</span><br><span class="line">getchar();</span><br><span class="line">&#125;<span class="comment">//构造顶点向量</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//初始化邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">&#123;</span><br><span class="line">G.arcs[i][j].adj = <span class="number">0</span>;</span><br><span class="line">G.arcs[i][j].info = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; G.arcnum; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边vi、vj:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v2;</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">//确定v1和v2在G中的位置</span></span><br><span class="line">i = LocateVex(G, v1);</span><br><span class="line">j = LocateVex(G, v2);</span><br><span class="line">G.arcs[i][j].adj = <span class="number">1</span>;<span class="comment">//1代表可达，0代表不可达</span></span><br><span class="line">G.arcs[j][i].adj = G.arcs[i][j].adj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">算法7.1</span></span><br><span class="line"><span class="comment">采用数组（邻接矩阵）表示法，构造图G。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">CreateGraph</span><span class="params">(MGraph &amp;G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入图的种类：0表示DG，1表示DN，2表示UDG，3表示UDN&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">G.kind=(GraphKind)x;</span><br><span class="line"><span class="keyword">switch</span> (G.kind)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> DG:</span><br><span class="line"><span class="keyword">return</span> CreateDG(G);</span><br><span class="line"><span class="keyword">case</span> DN:</span><br><span class="line"><span class="keyword">return</span> CreateDN(G);</span><br><span class="line"><span class="keyword">case</span> UDG:</span><br><span class="line"><span class="keyword">return</span> CreateUDG(G);</span><br><span class="line"><span class="keyword">case</span> UDN:<span class="keyword">return</span> CreateUDN(G);</span><br><span class="line"><span class="keyword">default</span>:<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">list</span><span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出邻接矩阵：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.vexs[i] &lt;&lt; <span class="string">&quot;----&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.vexnum; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.arcs[i][j].adj == INFINITY)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; <span class="string">&quot;∞&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>) &lt;&lt; G.arcs[i][j].adj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MGraph G;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x)</span><br><span class="line">&#123;</span><br><span class="line">CreateGraph(G);</span><br><span class="line"><span class="built_in">list</span>(G);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;是否继续(1、继续，0、退出)&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教材：严版数据结构&lt;/p&gt;
&lt;p&gt;页码：P162&lt;/p&gt;
&lt;p&gt;算法： 7.1-7.2&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Graph" scheme="http://jaheel.github.io/blog/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>体系结构设计</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-10-19T13:28:26.503Z</published>
    <updated>2020-04-21T04:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-决策"><a href="#1-决策" class="headerlink" title="1 决策"></a>1 决策</h1><p>功能性需求：基于特定的体系结构模式或风格</p><p>非功能性需求：性能、信息安全性(security)、安全性(safety)、可用性、可维护性</p><h1 id="2-体系结构视图"><a href="#2-体系结构视图" class="headerlink" title="2 体系结构视图"></a>2 体系结构视图</h1><ol><li><p>逻辑视图</p><blockquote><p>显示系统中对象和对象类的一些主要抽象</p></blockquote></li><li><p>进程视图</p><blockquote><p>显示在运行时系统是如何组织为一组交互的进程</p><ul><li>对非功能系统特征的判断有效</li></ul></blockquote></li><li><p>开发视图</p><blockquote><p>将软件分解成可以由单独的开发人员或开发团队实现的组件</p><ul><li>软件的管理者、程序员</li></ul></blockquote></li><li><p>物理视图</p><blockquote><p>显示系统硬件和系统中软件组件是如何分布在处理器上的。</p><ul><li>系统工程师</li></ul></blockquote></li></ol><h1 id="3-体系结构模式"><a href="#3-体系结构模式" class="headerlink" title="3 体系结构模式"></a>3 体系结构模式</h1><ol><li><p>MVC</p><blockquote><p>M：管理系统数据和在数据上的操作</p><p>V：定义和管理如何显示数据给用户</p><p>C：管理用户的交互</p></blockquote></li><li><p>分层体系结构</p><blockquote><ol><li>系统支持（操作系统、数据库等）</li><li>核心业务逻辑/应用功能 系统实用程序</li><li>用户界面管理 身份验证和授权</li><li>用户界面</li></ol></blockquote></li><li><p>容器体系结构</p><blockquote><p>系统所有数据在一个中央容器中管理，该中央容器可被所有系统组件访问。组件间不直接交互，它们只通过容器进行交互</p><p>​        例子：IDE</p><p>使用时机：一个系统中所生成的大量信息需要持久保存时，可以使用该模式。也可以在数据驱动系统中使用该模式，每当在容器中收入数据时将触发一个动作或工具。</p><p>优点：组件独立</p><p>缺点：容器出问题，整个系统出问题</p></blockquote></li><li><p>C/S结构</p><blockquote><p>系统功能以服务形态存在，每一个服务来自于某个单独的服务器</p><p>优点：服务器可以分布在网络上</p></blockquote></li><li><p>管道和过滤器体系结构</p><blockquote><p>系统运行时组织的模型</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-决策&quot;&gt;&lt;a href=&quot;#1-决策&quot; class=&quot;headerlink&quot; title=&quot;1 决策&quot;&gt;&lt;/a&gt;1 决策&lt;/h1&gt;&lt;p&gt;功能性需求：基于特定的体系结构模式或风格&lt;/p&gt;
&lt;p&gt;非功能性需求：性能、信息安全性(security)、安全性(safe
      
    
    </summary>
    
    
      <category term="软件工程" scheme="http://jaheel.github.io/blog/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="软件工程" scheme="http://jaheel.github.io/blog/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>二叉树（创建、遍历）&lt;递归、非递归&gt;</title>
    <link href="http://jaheel.github.io/blog/2020/10/19/%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%88%9B%E5%BB%BA%E3%80%81%E9%81%8D%E5%8E%86%EF%BC%89%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>http://jaheel.github.io/blog/2020/10/19/%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E5%88%9B%E5%BB%BA%E3%80%81%E9%81%8D%E5%8E%86%EF%BC%89%E9%80%92%E5%BD%92%E3%80%81%E9%9D%9E%E9%80%92%E5%BD%92/</id>
    <published>2020-10-19T13:28:26.502Z</published>
    <updated>2020-02-11T11:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>表示形式：链式结构</p><p>代码如下：</p><a id="more"></a><p>递归算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">TElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Nodenum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(T = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">T-&gt;data = ch;</span><br><span class="line">CreateBiTree(T-&gt;lchild);</span><br><span class="line">CreateBiTree(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, T-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (PreOrderTraverse(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (PreOrderTraverse(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (InOrderTraverse(T-&gt;lchild))</span><br><span class="line">m = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line"><span class="keyword">if</span> (m)</span><br><span class="line"><span class="keyword">if</span> (InOrderTraverse(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (PostOrderTraverse(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (PostOrderTraverse(T-&gt;rchild))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">NodeCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">Nodenum++;</span><br><span class="line"><span class="keyword">if</span> (NodeCount(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (NodeCount(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">LeafCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">Count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (LeafCount(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (LeafCount(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">交换二叉树中所有节点的左右子树</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">ExchangeBiTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiTree p;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (T-&gt;lchild || T-&gt;rchild) &#123;</span><br><span class="line">p = T-&gt;lchild;</span><br><span class="line">T-&gt;lchild = T-&gt;rchild;</span><br><span class="line">T-&gt;rchild = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ExchangeBiTree(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (ExchangeBiTree(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CopyBiTree</span><span class="params">(BiTree T, BiTree &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">B = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(B = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">B-&gt;data = T-&gt;data;</span><br><span class="line">CopyBiTree(T-&gt;lchild, B-&gt;lchild);</span><br><span class="line">CopyBiTree(T-&gt;rchild, B-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">DestroyTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">DestroyTree(T-&gt;lchild);</span><br><span class="line">DestroyTree(T-&gt;rchild);</span><br><span class="line"><span class="built_in">free</span>(T);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">ClearTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> leftDepth, rightDepth;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">leftDepth = Depth(T-&gt;lchild);</span><br><span class="line">rightDepth = Depth(T-&gt;rchild);</span><br><span class="line"><span class="keyword">if</span> (leftDepth &gt;= rightDepth)</span><br><span class="line"><span class="keyword">return</span> leftDepth + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> rightDepth + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiTree T, B;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;创建二叉树，按先序次序输入二叉树中结点的值：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBiTree(T);</span><br><span class="line">NodeCount(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二叉树的结点个数为&quot;</span> &lt;&lt; Nodenum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二叉树的深度为：&quot;</span> &lt;&lt; Depth(T) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;先序遍历二叉树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PreOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历二叉树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">InOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历二叉树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PostOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出二叉树的叶子结点：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">LeafCount(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;统计二叉树的叶子结点个数：&quot;</span> &lt;&lt; Count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换二叉树中所有节点的左右子树！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ExchangeBiTree(T);</span><br><span class="line"><span class="keyword">if</span> (CopyBiTree(T, B) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功复制二叉树T到二叉树B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (DestroyTree(T) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功销毁二叉树T！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (ClearTree(T) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功将二叉树T置为空树！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;先序遍历二叉树B，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PreOrderTraverse(B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历二叉树B，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">InOrderTraverse(B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历二叉树B，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PostOrderTraverse(B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">TElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Nodenum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Count = <span class="number">0</span>;<span class="comment">//二叉树叶子结点统计</span></span><br><span class="line"> </span><br><span class="line"><span class="function">BiTree <span class="title">CreateBiTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TElemType ch[maxSize];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">int</span> len = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(ch);</span><br><span class="line">BiTree <span class="built_in">stack</span>[maxSize];</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">BiTree temp;</span><br><span class="line">BiTree root = <span class="keyword">new</span> BiTNode();</span><br><span class="line">root-&gt;data = ch[i];</span><br><span class="line">root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">stack</span>[++top] = root;<span class="comment">//根节点入栈</span></span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;<span class="comment">//标志位：第一种情况：创建左孩子；2：创建右孩子；3：左右孩子均创建，出栈</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; len)</span><br><span class="line">&#123;</span><br><span class="line">BiTree pNew = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)<span class="comment">//创建左孩子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x27;#&#x27;说明这是栈顶结点无左孩子，把标志位置2，判断右孩子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pNew = <span class="keyword">new</span> BiTNode();</span><br><span class="line">pNew-&gt;data = ch[i];</span><br><span class="line">pNew-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">pNew-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">temp = <span class="built_in">stack</span>[top];<span class="comment">//取出当前栈顶</span></span><br><span class="line">temp-&gt;lchild = pNew;<span class="comment">//当前结点为栈顶结点的左孩子</span></span><br><span class="line"><span class="built_in">stack</span>[++top] = pNew;<span class="comment">//当前结点入栈</span></span><br><span class="line">flag = <span class="number">1</span>;<span class="comment">//使标志位初始化</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">2</span>)<span class="comment">//创建右孩子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">栈顶结点无右孩子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">flag = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">与创建左孩子同理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">pNew = <span class="keyword">new</span> BiTNode();</span><br><span class="line">pNew-&gt;data = ch[i];</span><br><span class="line">pNew-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">pNew-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">temp = <span class="built_in">stack</span>[top];</span><br><span class="line">temp-&gt;rchild = pNew;</span><br><span class="line"><span class="built_in">stack</span>[++top] = pNew;</span><br><span class="line">flag = <span class="number">1</span>;<span class="comment">//置1继续判断结点的左孩子（左孩子优先）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//左右孩子都创建</span></span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="built_in">stack</span>[top--];</span><br><span class="line"><span class="keyword">while</span> (top &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">stack</span>[top]-&gt;rchild == temp)</span><br><span class="line">--top;</span><br><span class="line"> </span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line">--i;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先序遍历非递归算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">BiTNode *Stack[maxSize];</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">BiTNode *p;</span><br><span class="line">Stack[++top] = T;</span><br><span class="line"><span class="keyword">while</span> (top != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = Stack[top--];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">Stack[++top] = p-&gt;rchild;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">Stack[++top] = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中序遍历的非递归算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">BiTNode *Stack[maxSize];</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">BiTNode *p = T;</span><br><span class="line"><span class="keyword">while</span> (top != <span class="number">-1</span> || p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Stack[++top] = p;</span><br><span class="line">p = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (top != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = Stack[top--];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data;</span><br><span class="line">p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">后序遍历的非递归算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">BiTNode *Stack1[maxSize];</span><br><span class="line"><span class="keyword">int</span> top1 = <span class="number">-1</span>;</span><br><span class="line">BiTNode *Stack2[maxSize];</span><br><span class="line"><span class="keyword">int</span> top2 = <span class="number">-1</span>;</span><br><span class="line">BiTNode *p = <span class="literal">NULL</span>;</span><br><span class="line">Stack1[++top1] = T;</span><br><span class="line"><span class="keyword">while</span> (top1 != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = Stack1[top1--];</span><br><span class="line">Stack2[++top2] = p;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">Stack1[++top1] = p-&gt;lchild;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">Stack1[++top1] = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (top2 != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = Stack2[top2--];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">层次遍历非递归算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> front, rear;</span><br><span class="line">BiTNode *<span class="built_in">queue</span>[maxSize];<span class="comment">//队列先进先出</span></span><br><span class="line">front = rear = <span class="number">0</span>;</span><br><span class="line">BiTNode *q;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;<span class="comment">//循环队列，避免越界</span></span><br><span class="line"><span class="built_in">queue</span>[rear] = T;<span class="comment">//首节点结点插入队尾</span></span><br><span class="line"><span class="keyword">while</span> (front != rear)<span class="comment">//说明队列中尚有结点</span></span><br><span class="line">&#123;</span><br><span class="line">front = (front + <span class="number">1</span>) % maxSize;<span class="comment">//避免越界</span></span><br><span class="line">q = <span class="built_in">queue</span>[front];<span class="comment">//队头结点出队</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q-&gt;data;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断左右孩子，左孩子先进队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="built_in">queue</span>[rear] = q-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="built_in">queue</span>[rear] = q-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">NodeCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">Nodenum++;</span><br><span class="line"><span class="keyword">if</span> (NodeCount(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (NodeCount(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   原理和层次遍历相同，稍作修改加个判断条件：</span></span><br><span class="line"><span class="comment">       此结点左右孩子是否为空，是则输出，不是则判断下一个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LeafCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> front, rear;</span><br><span class="line">BiTNode *<span class="built_in">queue</span>[maxSize];<span class="comment">//队列先进先出</span></span><br><span class="line">front = rear = <span class="number">0</span>;</span><br><span class="line">BiTNode *q;</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;<span class="comment">//循环队列，避免越界</span></span><br><span class="line"><span class="built_in">queue</span>[rear] = T;<span class="comment">//首节点结点插入队尾</span></span><br><span class="line"><span class="keyword">while</span> (front != rear)<span class="comment">//说明队列中尚有结点</span></span><br><span class="line">&#123;</span><br><span class="line">front = (front + <span class="number">1</span>) % maxSize;<span class="comment">//避免越界</span></span><br><span class="line">q = <span class="built_in">queue</span>[front];<span class="comment">//队头结点出队</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断左右孩子，左孩子先进队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="built_in">queue</span>[rear] = q-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="built_in">queue</span>[rear] = q-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;q-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q-&gt;data;</span><br><span class="line">Count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">交换二叉树中所有节点的左右子树:</span></span><br><span class="line"><span class="comment">(非递归）</span></span><br><span class="line"><span class="comment">     第一步：层次遍历：入队列</span></span><br><span class="line"><span class="comment"> 第二步：交换每个结点的左右子树</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExchangeBiTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">BiTNode *temp;</span><br><span class="line">BiTNode *p;</span><br><span class="line"><span class="keyword">int</span> front, rear;</span><br><span class="line">front = rear = <span class="number">0</span>;</span><br><span class="line">BiTNode *<span class="built_in">queue</span>[maxSize];</span><br><span class="line"><span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;<span class="comment">//循环队列，避免越界</span></span><br><span class="line"><span class="built_in">queue</span>[rear] = T;<span class="comment">//首节点结点插入队尾</span></span><br><span class="line"><span class="keyword">while</span> (front != rear)<span class="comment">//说明队列中尚有结点</span></span><br><span class="line">&#123;</span><br><span class="line">front = (front + <span class="number">1</span>) % maxSize;<span class="comment">//避免越界</span></span><br><span class="line">p = <span class="built_in">queue</span>[front];<span class="comment">//队头结点出队</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断左右孩子，左右孩子进队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="built_in">queue</span>[rear] = p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="built_in">queue</span>[rear] = p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">temp = p-&gt;lchild;</span><br><span class="line">p-&gt;lchild = p-&gt;rchild;</span><br><span class="line">p-&gt;rchild = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">CopyBiTree</span><span class="params">(BiTree T, BiTree &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">B = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!(B = (BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))))</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">B-&gt;data = T-&gt;data;</span><br><span class="line">CopyBiTree(T-&gt;lchild, B-&gt;lchild);</span><br><span class="line">CopyBiTree(T-&gt;rchild, B-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    销毁二叉树</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">DestroyTree(T-&gt;lchild);</span><br><span class="line">DestroyTree(T-&gt;rchild);</span><br><span class="line"><span class="built_in">free</span>(T);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   清空二叉树</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">ClearTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   求二叉树的深度(非递归算法）：（层次遍历）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> level = <span class="number">0</span>;<span class="comment">//层次</span></span><br><span class="line"><span class="keyword">if</span> (T)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">BiTNode *Queue[maxSize]; </span><br><span class="line">Queue[rear++] = T;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (front!=rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = rear - front;</span><br><span class="line">level++;</span><br><span class="line"><span class="keyword">while</span> (len--)</span><br><span class="line">&#123;</span><br><span class="line">BiTNode *temp = Queue[front];</span><br><span class="line">front++;</span><br><span class="line"><span class="keyword">if</span> (temp-&gt;lchild)</span><br><span class="line">Queue[rear++] = temp-&gt;lchild;</span><br><span class="line"><span class="keyword">if</span> (temp-&gt;rchild)</span><br><span class="line">Queue[rear++] = temp-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiTree T, B;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;创建二叉树，按先序次序输入二叉树中结点的值：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">T=CreateBiTree();</span><br><span class="line">NodeCount(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二叉树的结点个数为&quot;</span> &lt;&lt; Nodenum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二叉树的深度为：&quot;</span> &lt;&lt; Depth(T) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;先序遍历二叉树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PreOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历二叉树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">InOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历二叉树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PostOrderTraverse(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;层次遍历二叉树，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">level(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输出二叉树的叶子结点：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">LeafCount(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;统计二叉树的叶子结点个数：&quot;</span> &lt;&lt; Count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换二叉树中所有节点的左右子树！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ExchangeBiTree(T);</span><br><span class="line"><span class="keyword">if</span> (CopyBiTree(T, B) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功复制二叉树T到二叉树B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (DestroyTree(T) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功销毁二叉树T！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (ClearTree(T) == OK)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功将二叉树T置为空树！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;先序遍历二叉树B，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PreOrderTraverse(B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;中序遍历二叉树B，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">InOrderTraverse(B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后序遍历二叉树B，结果是：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">PostOrderTraverse(B);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;表示形式：链式结构&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://jaheel.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C" scheme="http://jaheel.github.io/blog/tags/C/"/>
    
      <category term="data structure" scheme="http://jaheel.github.io/blog/tags/data-structure/"/>
    
      <category term="Algorithm" scheme="http://jaheel.github.io/blog/tags/Algorithm/"/>
    
      <category term="Tree" scheme="http://jaheel.github.io/blog/tags/Tree/"/>
    
  </entry>
  
</feed>
